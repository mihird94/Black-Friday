library(dplyr)
library(ggplot2)
library(corrplot)
library(GGally)
library(tidyr)
summary(wine)
str(wine)
library(corrplot)
library(dplyr)
num<-wine%>%select(everything(), -contains("quality"))
corr<-cor(num)
corrplot(corr)
library(caret)
fc=findCorrelation(corr,cutoff=0.70)
fc=sort(fc)
num<-num[,-fc]
wine<-cbind(num,wine$quality)
colnames(wine)[11]<-"quality"
View(wine)
ncol(wine)
sum(is.na(wine))
wine$quality<-as.factor(wine$quality)
wine[,-11]<-scale(wine[,-11])
boxplot(wine)
winsorize = function(x, cut = 0.01){
topcutoff <- quantile(x, 1 - cut, na.rm = T)
bottomcutoff <- quantile(x, cut, na.rm = T)
i = which(x >= topcutoff)
x[i] = topcutoff
j = which(x <= bottomcutoff)
x[j] = bottomcutoff
return(x)
}
wine[,-11]<-winsorize(wine[,-11])
boxplot(wine)
wine[,-11]<-winsorize(wine[,-11])
wine<-cbind(winsorize(wine[,-11]),wine$quality)
wine<-winsorize(wine)
df<-wine[,-11]
df<-winsorize(df)
winsorize = function(x, cut = 0.01){
topcutoff <- quantile(x, 1 - cut, na.rm = T)
bottomcutoff <- quantile(x, cut, na.rm = T)
i = which(x >= topcutoff)
x[i] = topcutoff
j = which(x <= bottomcutoff)
x[j] = bottomcutoff
return(x)
}
df<-wine[,-11]
df<-winsorize(df)
winsorize(wine$fixed.acidity)
winsorize(df)
df<-wine[,-11]
df<-sapply(df,winsorize)
# wine<-cbind(df,wine$quality)
df<-wine[,-11]
df<-sapply(df,winsorize)
wine<-cbind(df,wine$quality)
wine[,-11]<-sapply(wine[,-11],winsorize)
boxplot(wine)
wine[,-11]<-sapply(wine[,-11],winsorize)
boxplot(wine)
split<-createDataPartition(wine$quality,p = 0.7,list=FALSE)
str(wine\)
str(wine)
wine<-read.csv("C://Users//MD//Desktop//PROJECTS//winequality//winequality-white.csv",sep = ";")
library(caret)
library(dplyr)
library(ggplot2)
library(corrplot)
library(GGally)
library(tidyr)
summary(wine)
str(wine)
library(corrplot)
library(dplyr)
num<-wine%>%select(everything(), -contains("quality"))
corr<-cor(num)
corrplot(corr)
library(caret)
fc=findCorrelation(corr,cutoff=0.70)
fc=sort(fc)
num<-num[,-fc]
wine<-cbind(num,wine$quality)
colnames(wine)[11]<-"quality"
sum(is.na(wine))
wine[,-11]<-scale(wine[,-11])
wine$quality<-as.factor(wine$quality)
wine[,-11]<-scale(wine[,-11])
boxplot(wine)
winsorize = function(x, cut = 0.01){
topcutoff <- quantile(x, 1 - cut, na.rm = T)
bottomcutoff <- quantile(x, cut, na.rm = T)
i = which(x >= topcutoff)
x[i] = topcutoff
j = which(x <= bottomcutoff)
x[j] = bottomcutoff
return(x)
}
wine[,-11]<-sapply(wine[,-11],winsorize)
boxplot(wine)
split<-createDataPartition(wine$quality,p = 0.7,list=FALSE)
train<-wine[split,]
test1<-wine[-split,]
split1<-createDataPartition(test1$quality,p=0.5,list=FALSE)
test<-test1[split1,]
validation<-test1[-split1,]
nrow(train)
nrow(test)
nrow(validation)
suppressPackageStartupMessages(library(randomForest))
suppressPackageStartupMessages(library(ModelMetrics))
modelrf<-randomForest(quality~.,data = train)
print(modelrf)
plot(modelrf)
error<-numeric(0)
for (i in seq(50,500,50)){
modrf<-randomForest(quality~.,data=train,ntree=i)
validation$pred<-predict(modrf,validation)
error<-c(error,sum(validation$quality==validation$pred)/nrow(validation))
}
ntreesacc<-data.frame(Ntree=seq(50,500,50),Accuracy_Score=error)
print(ntreesacc)
modelrf<-randomForest(quality~.,data = train,ntree=200)
test$pred<-predict(modelrf,test)
print("Accuracy Score on test set is: ")
print(sum(test$quality==test$pred)/nrow(test))
modelrf
plot(modelrf)
install.packages("tinytex")
training<-read.csv('C://Users//MD//Desktop//PROJECTS//blackfriday//train.csv')
test<-read.csv('C://Users//MD//Desktop//PROJECTS//blackfriday//test.csv')
summary(training)
str(training)
library(plyr)
library(dplyr)
library(ggplot2)
summary(training)
str(training)
View(tarining)
summary(training)
str(training)
View(training)
testing$Purchase<-0
combinebf<-rbind(training,testing)
training<-read.csv('C://Users//MD//Desktop//PROJECTS//blackfriday//train.csv')
testing<-read.csv('C://Users//MD//Desktop//PROJECTS//blackfriday//test.csv')
testing$Purchase<-0
combinebf<-rbind(training,testing)
combinebf$Occupation<-as.factor(combinebf$Occupation)
combinebf$Product_Category_1<-as.factor(combinebf$Product_Category_1)
combinebf$Product_Category_2<-as.factor(combinebf$Product_Category_2)
combinebf$Product_Category_3<-as.factor(combinebf$Product_Category_3)
ggplot(training, aes(x = City_Category, y = Purchase, fill = Gender)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("City") +
ylab("Purchase") +
ggtitle("Purcahse vs City")
ggplot(training, aes(x = Age, y = Purchase, fill = Gender)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Age") +
ylab("Purchase") +
ggtitle("Purchase vs Age")
ggplot(combinebf[1:nrow(training),], aes(x = Stay_In_Current_City_Years, y =Purchase,fill=Gender))+
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("tay_In_Current_City_Years") +
ylab("Purchase") +
ggtitle("Occupation vs Product_Category_2")
ggplot(combinebf[1:nrow(trainbf),], aes(x = Occupation, y =Purchase,fill=Gender))+
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Occupation") +
ylab("Purchase") +
ggtitle("Occupation vs Purchase")
ggplot(data = training,aes(x=Purchase))+geom_histogram(binwidth = 10)+ggtitle("Histogram of Purchase")
ggplot(data = training,aes(x=Purchase))+geom_histogram(binwidth = 10)+ggtitle("Histogram of Purchase")
ggplot(data = training,aes(x=Purchase))+geom_histogram(binwidth = 50)+ggtitle("Histogram of Purchase")
ggplot(data = training,aes(x=Purchase))+geom_histogram(binwidth = 100)+ggtitle("Histogram of Purchase")
ggplot(data = training,aes(x=Purchase))+geom_histogram(binwidth = 100)+ggtitle("Histogram of Purchase")
ggplot(data = training,aes(x=Purchase))+geom_histogram(binwidth =500)+ggtitle("Histogram of Purchase")
ggplot(data = training,aes(x=Purchase))+geom_histogram(binwidth =500)+ggtitle("Histogram of Purchase")
plot(density(training$Purchase))
sapply(combinebf,x,is.na(x))
sapply(combinebf,function(x),sum(is.na(x))
sapply(combinebf,function(x) sum(is.na(x))
sapply(combinebf,function(x) sum(is.na(x))
sapply(combinebf,function(x) sum(is.na(x)))
library(plyr)
library(dplyr)
library(ggplot2)
library(dummies)
training<-read.csv('C://Users//MD//Desktop//PROJECTS//blackfriday//train.csv')
testing<-read.csv('C://Users//MD//Desktop//PROJECTS//blackfriday//test.csv')
summary(training)
str(training)
View(training)
testing$Purchase<-0
combinebf<-rbind(training,testing)
combinebf$Occupation<-as.factor(combinebf$Occupation)
combinebf$Product_Category_1<-as.factor(combinebf$Product_Category_1)
combinebf$Product_Category_2<-as.factor(combinebf$Product_Category_2)
combinebf$Product_Category_3<-as.factor(combinebf$Product_Category_3)
ggplot(training, aes(x = City_Category, y = Purchase, fill = Gender)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("City") +
ylab("Purchase") +
ggtitle("Purcahse vs City")
ggplot(training, aes(x = Age, y = Purchase, fill = Gender)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Age") +
ylab("Purchase") +
ggtitle("Purchase vs Age")
ggplot(combinebf[1:nrow(trainbf),], aes(x = Occupation, y =Purchase,fill=Gender))+
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Occupation") +
ylab("Purchase") +
ggtitle("Occupation vs Purchase")
ggplot(data = training,aes(x=Purchase))+geom_histogram(binwidth =500)+ggtitle("Histogram of Purchase")
plot(density(training$Purchase))
sapply(combinebf,function(x) sum(is.na(x)))
combinebf$Product_Category_2<-as.integer(combinebf$Product_Category_2)
combinebf$Product_Category_2[is.na(combinebf$Product_Category_2)]<-9999
combinebf$Product_Category_3<-as.integer(combinebf$Product_Category_3)
combinebf$Product_Category_3[is.na(combinebf$Product_Category_3)]<-999
combinebf <- dummy.data.frame(combinebf, names=c("City_Category"), sep="_")
combinebf$Age<-as.character(combinebf$Age)
combinebf$Age[combinebf$Age == "0-17"] <- "15"
combinebf$Age[combinebf$Age == "18-25"] <- "21"
combinebf$Age[combinebf$Age == "26-35"] <- "30"
combinebf$Age[combinebf$Age == "36-45"] <- "40"
combinebf$Age[combinebf$Age == "46-50"] <- "48"
combinebf$Age[combinebf$Age == "51-55"] <- "53"
combinebf$Age[combinebf$Age == "55+"] <- "60"
combinebf$Age<-as.integer(combinebf$Age)
combinebf$Stay_In_Current_City_Years<-as.character(combinebf$Stay_In_Current_City_Years)
combinebf$Stay_In_Current_City_Years[combinebf$Stay_In_Current_City_Years=="4+"]<-"4"
combinebf$Stay_In_Current_City_Years<-as.integer(combinebf$Stay_In_Current_City_Years)
combinebf$Gender<-ifelse(combinebf$Gender=="M",0,1)
product_count <- ddply(combinebf, .(Product_ID), nrow)
names(product_count)[2] <- "Product_Count"
combinebf<-merge(combinebf,product_count,by="Product_ID")
combinebf$Product_Count[is.na(combinebf$Product_Count)]<-0
product_mean <- ddply(combinebf[1:nrow(training),], .(Product_ID), summarize, Product_Mean=mean(Purchase))
combinebf<-merge(combinebf,product_mean,by="Product_ID")
combinebf$Product_Mean[is.na(combinebf$Product_Mean)]<-0
usercount <- ddply(combinebf, .(User_ID), nrow)
names(usercount)[2] <- "User_Count"
combinebf<-merge(combinebf,usercount,by="User_ID")
combinebf1<-subset(combinebf,select = -c(Product_ID,User_ID))
nrow(combinebf1)
nrow(combinebf)
model
test$predicted<-predict(model,test)
print(head(test$predicted,10))
library(plyr)
library(dplyr)
library(ggplot2)
library(dummies)
training<-read.csv('C://Users//MD//Desktop//PROJECTS//blackfriday//train.csv')
testing<-read.csv('C://Users//MD//Desktop//PROJECTS//blackfriday//test.csv')
summary(training)
str(training)
View(training)
testing$Purchase<-0
combinebf<-rbind(training,testing)
combinebf$Occupation<-as.factor(combinebf$Occupation)
combinebf$Product_Category_1<-as.factor(combinebf$Product_Category_1)
combinebf$Product_Category_2<-as.factor(combinebf$Product_Category_2)
combinebf$Product_Category_3<-as.factor(combinebf$Product_Category_3)
ggplot(training, aes(x = City_Category, y = Purchase, fill = Gender)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("City") +
ylab("Purchase") +
ggtitle("Purcahse vs City")
ggplot(training, aes(x = Age, y = Purchase, fill = Gender)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Age") +
ylab("Purchase") +
ggtitle("Purchase vs Age")
ggplot(combinebf[1:nrow(training),], aes(x = Occupation, y =Purchase,fill=Gender))+
geom_boxplot() +
theme(axis.text.x = element_text(angle = 70, vjust = 0.5, color = "black")) +
xlab("Occupation") +
ylab("Purchase") +
ggtitle("Occupation vs Purchase")
ggplot(data = training,aes(x=Purchase))+geom_histogram(binwidth =500)+ggtitle("Histogram of Purchase")
plot(density(training$Purchase))
sapply(combinebf,function(x) sum(is.na(x)))
combinebf$Product_Category_2<-as.integer(combinebf$Product_Category_2)
combinebf$Product_Category_2[is.na(combinebf$Product_Category_2)]<-9999
combinebf$Product_Category_3<-as.integer(combinebf$Product_Category_3)
combinebf$Product_Category_3[is.na(combinebf$Product_Category_3)]<-999
combinebf <- dummy.data.frame(combinebf, names=c("City_Category"), sep="_")
combinebf$Age<-as.character(combinebf$Age)
combinebf$Age[combinebf$Age == "0-17"] <- "15"
combinebf$Age[combinebf$Age == "18-25"] <- "21"
combinebf$Age[combinebf$Age == "26-35"] <- "30"
combinebf$Age[combinebf$Age == "36-45"] <- "40"
combinebf$Age[combinebf$Age == "46-50"] <- "48"
combinebf$Age[combinebf$Age == "51-55"] <- "53"
combinebf$Age[combinebf$Age == "55+"] <- "60"
combinebf$Age<-as.integer(combinebf$Age)
combinebf$Stay_In_Current_City_Years<-as.character(combinebf$Stay_In_Current_City_Years)
combinebf$Stay_In_Current_City_Years[combinebf$Stay_In_Current_City_Years=="4+"]<-"4"
combinebf$Stay_In_Current_City_Years<-as.integer(combinebf$Stay_In_Current_City_Years)
combinebf$Gender<-ifelse(combinebf$Gender=="M",0,1)
product_count <- ddply(combinebf, .(Product_ID), nrow)
names(product_count)[2] <- "Product_Count"
combinebf<-merge(combinebf,product_count,by="Product_ID")
combinebf$Product_Count[is.na(combinebf$Product_Count)]<-0
product_mean <- ddply(combinebf[1:nrow(training),], .(Product_ID), summarize, Product_Mean=mean(Purchase))
combinebf<-merge(combinebf,product_mean,by="Product_ID",all = TRUE)
combinebf$Product_Mean[is.na(combinebf$Product_Mean)]<-0
usercount <- ddply(combinebf, .(User_ID), nrow)
names(usercount)[2] <- "User_Count"
combinebf<-merge(combinebf,usercount,by="User_ID",all = TRUE)
combinebf1<-subset(combinebf,select = -c(Product_ID,User_ID))
train<-combinebf1[1:nrow(training),]
test<-combinebf1[(nrow(training)+1):nrow(combinebf1),]
library(caret)
TrainControl <- trainControl( method = "repeatedcv", number = 4, repeats = 3)
model<- train(Purchase~ ., data = train, method = "gbm", trControl = TrainControl,verbose = FALSE)
test$predicted<-predict(model,test)
print(head(test$predicted,10))
model
View(test)
View(test)
View(testing)
View(testing)
bfdf<-testing%>%select(User_ID,Product_ID)
bfdf1<-cbind(bfdf,test$predicted)
write.csv(bfdf1,file = "C://Users//MD//Desktop//PROJECTS//blackfriday//submission.csv")
summary(model)
model
print(model)
library(dplyr)
library(tidyr)
# 1. Read in Activity Labels and Features list
activity_labels <- read.table("activity_labels.txt"
, header = FALSE, col.names = c("numact", "actname"))
features <- read.table("features.txt"
, header = FALSE, col.names = c("numcol","colname"))
##Train##
x_train<-read.table("./train/X_train.txt",header=FALSE,col.names=features$colname)
y_train<-read.table("./train/y_train.txt",header=FALSE,col.names ="actlabel",sep=" ")
sub_train<-read.table("./train/subject_train.txt",header=FALSE,col.names="subject")
train<-cbind(sub_train,x_train,y_train)
##Test##
x_test<-read.table("./test/X_test.txt",header=FALSE,col.names=features$colname)
y_test<-read.table("./test/y_test.txt",header=FALSE,col.names ="actlabel",sep="")
sub_test<-read.table("./test/subject_test.txt",header=FALSE,col.names="subject")
test<-cbind(sub_test,x_test,y_test)
###
combined<-rbind(test,train)
chdir
setwd("C://Users/Desktop//PROJECTS//UCI HAR Dataset")
?setwd
getwd()
setwd("C:/Users/Desktop/PROJECTS/UCI HAR Dataset")
setwd("C:/Users/MD/Desktop/PROJECTS/UCI HAR Dataset")
library(dplyr)
library(tidyr)
# 1. Read in Activity Labels and Features list
activity_labels <- read.table("activity_labels.txt"
, header = FALSE, col.names = c("numact", "actname"))
features <- read.table("features.txt"
, header = FALSE, col.names = c("numcol","colname"))
##Train##
x_train<-read.table("./train/X_train.txt",header=FALSE,col.names=features$colname)
y_train<-read.table("./train/y_train.txt",header=FALSE,col.names ="actlabel",sep=" ")
sub_train<-read.table("./train/subject_train.txt",header=FALSE,col.names="subject")
train<-cbind(sub_train,x_train,y_train)
##Test##
x_test<-read.table("./test/X_test.txt",header=FALSE,col.names=features$colname)
y_test<-read.table("./test/y_test.txt",header=FALSE,col.names ="actlabel",sep="")
sub_test<-read.table("./test/subject_test.txt",header=FALSE,col.names="subject")
test<-cbind(sub_test,x_test,y_test)
###
combined<-rbind(test,train)
View(combined)
train
activity_labels <- read.table("activity_labels.txt"
, header = FALSE, col.names = c("numact", "actname"))
features <- read.table("features.txt"
, header = FALSE, col.names = c("numcol","colname"))
x_train<-read.table("./train/X_train.txt",header=FALSE,col.names=features$colname)
y_train<-read.table("./train/y_train.txt",header=FALSE,col.names ="actlabel",sep=" ")
sub_train<-read.table("./train/subject_train.txt",header=FALSE,col.names="subject")
train<-cbind(sub_train,x_train,y_train)
x_test<-read.table("./test/X_test.txt",header=FALSE,col.names=features$colname)
y_test<-read.table("./test/y_test.txt",header=FALSE,col.names ="actlabel",sep="")
sub_test<-read.table("./test/subject_test.txt",header=FALSE,col.names="subject")
test<-cbind(sub_test,x_test,y_test)
combined<-rbind(test,train)
View(train)
ncol(train)
ncol(test)
test$actlabel
ncol(combined)
nrow(combined)
nrow(train'')
nrow(train)
nrow(test)
table(sapply(combined,function(x) is.numeric(x)))
table(sapply(combined,function(x) is.numeric(x)))
table(sapply(train,function(x) is.numeric(x)))
Pcatrain<-prcomp(train[,-563],scale. = T)
Pcatrain$center
Pcatrain$scale
Pcatrain$rotation[1:7,1;:5]
Pcatrain$rotation[1:7,1:5]
Pcatrain$rotation[1:10,1:10]
print(as.dataframe(Pcatrain$rotation[1:10,1:10]))
print(as.data.frame(Pcatrain$rotation[1:10,1:10]))
dim(Pcatrain$x)
dim(Pcatrain$rotation)
biplot(Pcatrain,scale = 0)
biplot(Pcatrain,scale = 0)
biplot(Pcatrain,scale = 0)
biplot(Pcatrain,scale = 0)
std_dev<-Pcatrain$sdev
variance<-std_dev^2
variance[1:20]
prop_var_exp<-variance/sum(variance)
prop_var_exp[1:15]
plot(prop_var_exp, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
plot(cumsum(prop_var_exp), xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
Pcatrain<-prcomp(train,scale. = T)
print(as.data.frame(Pcatrain$rotation[1:10,1:10]))
biplot(Pcatrain,scale = 0)
std_dev<-Pcatrain$sdev
variance<-std_dev^2
variance[1:20]
prop_var_exp<-variance/sum(variance)
prop_var_exp[1:15]
plot(cumsum(prop_var_exp), xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
train_data <- data.frame(actlabel = as.factor(train$actlabel), Pcatrain$x)
train_data<-train_data[,1:301]
library(randomForest)
rf_model<-randomForest(actlabel~.,data = train_data)
rf_model
rf_model
rf_model<-randomForest(actlabel~.,data = train_data)
rf_model
rf_model$confusion
diag(rf_model)
sum(diag(rf_model$confusion))/sum(rf_model$confusion)
rf_model
(sum(diag(rf_model$confusion))/sum(rf_model$confusion))*100
plot(model_rf)
plot(rf_model)
test_data<-predict(Pcatrain,newdata = test)
test_data<-as.data.frame(test_data)
View(test_data)
ncol(test_data)
test_data$PC563
test_data<-predict(Pcatrain,newdata = test)
test_data<-as.data.frame(test_data)
test_data<-cbind(as.factor(test$actlabel),test_data)
test_data<-predict(Pcatrain,newdata = test)
test_data
test_data<-predict(Pcatrain,newdata = test)
test_data<-as.data.frame(test_data)
test_data<-cbind(as.factor(test$actlabel),test_data)
colnames(test_data)[1]<-"actlabel"
View(test_data)
View(train_data)
test_data<-predict(Pcatrain,newdata = test)
test_data<-as.data.frame(test_data)
test_data<-cbind(as.factor(test$actlabel),test_data)
colnames(test_data)[1]<-"actlabel"
test_data<-test_data[,1:301]
ncol(test_data)
test_data$pred<-predict(rf_model,test_data)
library(randomForest)
library(dplyr)
test_data%>%select(actlabel,pred)%>%summarise(count=n())
test_data%>%select(actlabel,pred)%>%print()
sum(test_data$actlabel==test_data$pred)/nrow(test_data)
sum(test_data$actlabel==test_data$pred)
(sum(test_data$actlabel==test_data$pred)/nrow(test_data))*100
install.packages('neuralnet')
library(neuralnet)
NN = neuralnet(actlabel~., train_data, hidden = 3 , linear.output = T )
NN = neuralnet(actlabel~.,data=train_data, hidden = 3 , linear.output = T )
?neuralnet
NN = neuralnet(actlabel~.,train_data, hidden = 3 , linear.output = T )
NN = neuralnet(actlabel~.,train_data, hidden = 3 , linear.output = T )
NN = neuralnet(actlabel~.,train_data, hidden = 3 , linear.output = T )
TrainControl <- trainControl( method = "repeatedcv", number =5, repeats = 5)
library(caret)
TrainControl <- trainControl( method = "repeatedcv", number =5, repeats = 5)
xg_model<- train(actlabel~., data = train_data, method = "xgbDART", trControl = TrainControl,verbose = FALSE)
TrainControl <- trainControl( method = "repeatedcv", number =5, repeats = 5)
xg_model<- train(actlabel~., data = train_data, method = "xgbTree", trControl = TrainControl,verbose = FALSE)
TrainControl <- trainControl( method = "repeatedcv", number =5, repeats = 5)
xg_model<- train(actlabel~., data = train_data, method = "xgbTree", trControl = TrainControl,verbose = FALSE)
